# В google colab добавить: !pip install pyTelegramBotAPI
# Чтобы добавить новое слово — нужно его прописать в объект DEFINITOINS на 13 строчке
# Важно все новые аббривиатуры в коде писать только с маленьких букв
# Пользователь в телеграм может писать и с большой и с маленькой — код всегда приводит к строчным

from telebot import TeleBot, types

bot = TeleBot(token='6411427920:AAFPRUwKrXKV3qcr00_ykpmq3dVD8DPDQM4', parse_mode='html') # создание бота

# словарь с определениями и аббревиатурами, которые знает бот
# в формате:
# 'ключевая фраза': 'соответствующее ей определение'
DEFINITOINS = {
    'регресс': 'Проверить что новый функционал не сломал существующий',
    'авторизация': 'это акт предоставления разрешения на выполнение какого-либо действия стороне, прошедшей проверку подлинности',
    'аутентификация': 'это сам процесс проверки подлинности пользователя, чтобы убедиться, что он является тем, за кого себя выдает',
    'альфа-тестирование': 'имитация реальной работы с системой штатными разработчиками, либо реальная работа с системой потенциальными пользователями/заказчиком на ранней стадии разработки продукта, но в некоторых случаях может применяться для законченного продукта в качестве внутреннего приёмочного тестирования',
    'автоматизированное тестирование': 'тестирование ПО при помощи автотестов',
    'ассайнить': 'поручить какое-либо задание кому-то',
    'апрув': 'подтверждение, согласие, одобрение чего-либо',
    'баг': 'недостаток компонента или системы, который может привести к отказу определенной функциональности.',
    'билд': 'готовая версия ПО или конкретного компонента, который можно тестировать, зачастую его еще называют сборкой многих задач программистов в одну общую',
    'баг-репорт': 'строгий документ, содержащий в себе техническое описание бага, содержащее развернутую информацию: непосредственно сам баг, условия возникновения некорректной работы — последовательность действий, приводящих к багу, серьезность последствий и вытекающий из них статус приоритета ошибки',
    'бета-тестирование': 'интенсивное использование почти готовой версии продукта с целью выявления максимального числа ошибок в его работе для их последующего устранения перед окончательным выходом (релизом) продукта на рынок, к массовому потребителю',
    'белый ящик': 'тестировщику известно все детали реализации тестируемой системы',
    'бэклог': 'набор требований, которые необходимо реализовать. Он постоянно обновляется, добавляются новые фичи, требования к продукту, устанавливается приоритет задач',
    'валидация': 'определение соответствия разрабатываемого ПО ожиданиям и потребностям пользователя, требованиям к системе',
    'верификация': 'процесс оценки системы или её компонентов с целью определения удовлетворяют ли результаты текущего этапа разработки условиям, сформированным в начале этого этапа',
    'веб-тестирование': 'тестирование браузерных приложений',
    'веб-сайт': 'это коллекция веб-страниц, связанных между собой какими-либо способами. Имеет простую архитектуру на основе HTML-кода, содержат текстовые файлы, картинки, музыку и т.д',
    'веб-приложение': 'это клиент-серверное приложение, в котором клиент взаимодействует с веб-сервером при помощи браузера (это интерактивные компьютерные приложения, которые специально разрабатываются для сети интернет и позволяет пользователям вводить, получать и манипулировать данными с помощью взаимодействия)',
    'веб-сервис': 'это программа, которая организует взаимодействие между сайтами',
    'грумминг': 'это процесс подготовки программного продукта к развертыванию или выпуску.',
    'дедлайн': 'крайний срок выполнения или сдачи проекта/задания/работы',
    'деплой': 'это развертывание (перенос) программы (исполняемого кода) на сервер или устройство, где оно должно функционировать',
    'дымовое тестирование': 'короткий цикл тестов для подтверждения, что после сборки кода (нового или исправленного) приложение стартует и выполняет основные, критичные функции.',
    'жизненный цикл программного обеспечения': '(SDLC)— период времени, который начинается с момента принятия решения о необходимости создания продукта или фичи и заканчивается в момент его полного изъятия из эксплуатации.',
    'жизненный цикл бага': 'статус бага на доске, который состоит из четырех основных стадий: 1.Открыт (Open) — тестировщик выявил баг и добавил в репорт 2.В работе (In Progress) — о баге сообщили исполнителю(разработчику), и он занимается исправлением. 3.Исправлен (Ready for check) — исполнитель закончил работу по исправлению бага и передал проект на повторную проверку тестировщику. 4.Закрыт (Closed) — баг устранен и больше не воспроизводится.',
    'задизейблить': '(отключить, деактивировать, disable)— отключение или временное выключение некоторого элемента или функциональности программы или веб-страницы.',
    'интеграционное тестирование': '— тестирование взаимодействия и связей нескольких компонентов приложения (смотри так же модульное, системное). Тестирование Интернационализации— тестирование, направленное на проверку готовности продукта к работе с использованием различных языков и с учётом различных национальных и культурных особенностей. (не путать с Локализацией)',
    'идентификация': '— это процедура,в результате выполнения которой для субъекта идентификации выставляется его идентификатор, определяющий этого субъекта в системе.',
    'контроль качества': '(Quality Control, QC) — проверка того, насколько система соответствует требованиям качества.',
    'конфиг': '(Configuration) — конфигурационный файл программы, в котором записаны настройки.',
    'костыль': '— исправление серьезных багов/дыр/ошибок без должного исправления системы в целом, т.е. решение проблемы «на коленке» в кратчайшие сроки в ущерб эффективности и хорошим практикам программирования.',
    'куки': '(Cookie) — небольшой фрагмент данных, отправленный веб-сервером и хранимый на компьютере пользователя.',
    'кэш': '(Cache) — промежуточный буфер с быстрым доступом к нему, содержащий информацию, которая может быть запрошена с наибольшей вероятностью.',
    'клиент-серверная архитектура': 'взаимодействие между клиентом и сервером, путем отправления запроса и получения ответа.',
    'логи': '(Logs) — это записи событий и сообщений, создаваемые программой или системой во время ее работы. Есть 7 уровней логирования; - debug — выводится информация, которая пригодится для отладки программы;- info — обычные и стандартные сообщения;- warning — нефатальное предупреждение;- error — записи ошибок;- fatal — фатальная ошибка;- off — сообщения не выводятся;- trace — информация для точной отладки;- all — выводится вся информация.',
    'локализация': 'тестирование, направленное на проверку корректности и качества адаптации продукта к использованию на том или ином языке с учётом национальных и культурных особенностей. (не путать с Интернационализацией)',
    'модульное тестирование': 'тестирование на уровне отдельного функционального компонента приложения. ',
    'мобильное тестирование': '— тестирование мобильных приложений.',
    'негативное тестирование': '(Negative testing) — тестирование ПО на то, как оно не должно работать.',
    'нефункциональное тестирование': '— проверка нефункциональных особенностей приложения (удобство использования, совместимость, производительность функциональное тестирование)',
    'откат': '— возвращение на исходную позицию (на предыдущую версию). (например из-за критических багов в проде)',
    'ошибка': '(Error) — действие, которое порождает неправильный результат.',
    'патч': '(Patch) — дополнение или обновление программы, которое исправляет ошибки/баги/глюки.',
    'позитивное тестирование': '(Positive testing) — тестирование ПО на то, как оно должно работать.',
    'продакшн': '(или Прод, production) – рабочая версия продукта, с которой работают конечные пользователи (например, сайта, программы или приложения).',
    'приёмочное тестирование': '— тестирование, направленное на проверку приложения с точки зрения конечного пользователя/заказчика.',
    'приоритет': '(Priority)— 5-ти бальная система ошибок важных для бизнеса (P1 – Высокий (High), P2 – Средний (Medium), P3 – Низкий (Low).',
    'регрессионное тестирование': '— проверка на наличие багов, вызванных изменениями в приложении.',
    'релиз': '(Release) — финальный выпуск программы. Один из этапов жизненного цикла ПО',
    'ручка': '(HTTP запрос) — это сообщения, отправляемые клиентом, чтобы инициировать реакцию со стороны сервера.',
    'сбой': '(Failure) — несоответствие фактического результата работы компонента или системы ожидаемому результату.',
    'серый ящик': '(Grey box) — тестировщику известно только некоторые особенности устройства тестируемой системы.',
    'серьезность': '(Severity)  — это атрибут, характеризующий влияние дефекта на работоспособность приложения. Проставляется тестировщиком или техническим специалистом, который может оценить степень влияния дефекта на работу системы.',
    'спек': 'Спек/спека/спецификация(Specification) — техническое описание ПО, на которое ориентируется тестировщик ПО.',
    'спецификация': 'Спек/спека/спецификация(Specification) — техническое описание ПО, на которое ориентируется тестировщик ПО.',
    'стэк': '(Stack — стопка; читается стэк) — абстрактный тип данных, представляющий собой список элементов, организованных по принципу LIFO (англ. last in — first out, «последним пришёл — первым вышел»)',
    'таск': 'таска (Task) — задание, задача.',
    'тестирование': '(Testing) — поиск несоответствия между фактическим и ожидаемым результатом. Тестирование = поиск багов.',
    'тест-кейс': '(Test Case) — это (строгий) артефакт, описывающий совокупность шагов, конкретных условий и параметров, необходимых для проверки реализации тестируемой функции или её части',
    'тест-план': '(Test plan) — это документ, описывающий весь объем работ по тестированию, начиная с описания объекта, стратегии, расписания, критериев начала и окончания тестирования, до необходимого в процессе работы оборудования, специальных знаний, а также оценки рисков с вариантами их разрешения.',
    'тестовое покрытие': '(Test Coverage)  — условная площадь ПО, которая покрывается всеми тестами',
    'тестовый набор': '(Test Suite)  — несколько объединенных тест-кейсов для проверки одного типа.',
    'техническое задание': '(ТЗ)— документ, в котором зафиксированы требования к решениям, которые должны быть реализованы в ходе создания сайта или программного обеспечения.',
    'толстый клиент': '— это такое приложение, которое обеспечивает расширенную функциональность независимо от центрального сервера. Часто сервер в данном случае является лишь хранилищем данных, а вся работа по обработке данных приносится на машину клиента. Например, 1С, онлайн игры.',
    'тонкий клиент': '— это компьютер или программа-клиент в сетях с клиент-серверной архитектурой, которая переносит всё или большую часть задач по обработке информации на сервер. Примером тонкого клиента может быть браузер, который используется для работы с веб-приложениями. Он тонкий, потому что вся основная бизнес-логика, все вычислительные мощности расположены на компьютере сервера, а клиент-простое программное обеспечение, которое помогает отправлять запросы на сервер.',
    'тул': '(Tool)  — инструмент. Вспомогательная программа.',
    'утилита': 'вспомогательная компьютерная программа в составе общего программного обеспечения для выполнения специализированных типовых задач, связанных с работой оборудования и операционной системы',
    'факап': '(Fuck up) — неудача, провал.',
    'фиксить': '(Fix)  — чинить ПО, чинить баги.',
    'фича': '(Feature) — уникальная особенность программы. Существует популярное выражение — «Это не баг, а фича»',
    'функциональное тестирование': '— проверка корректности работы функциональности приложения.',
    'хотфикс': '(Hotfix — горячее исправление) — срочное исправление ошибок и недоработок программы, выявленных в процессе эксплуатации. Это экстренное решение проблемы, которое оптимально в текущей ситуации, но в долгосрочной перспективе может не подойти',
    'чек-лист': 'Checklist) — перечень компонентов ПО, которые необходимо протестировать. Список проверок',
    'чекать': '(прочекать, check) — что-то проверить, посмотреть, изучить.',
    'черный ящик': '(Black box) — тестировщику не известно как устроена тестируемая система',
    'шарить': '(расшарить, share)  — делиться информацией, открыть доступ к информации (например показать свой экран или поделится коллекцией в Postman)',
    'эджайл': '(Agile) — набор методов и принципов гибкого управления разработки ПО. Как можно быстрее даем версию продукта на рынок и далее маленькими итерациями его улучшаем. Методология гибкой разработки',
    'юнит-тестирование': '(Unit-testing) — это тестирование, производимое самим программистом.',
    'юзать': '(Use) — использовать/пользоваться (например определенной программой или инструментом).',
    'якорь': '— это закладка на определённом месте страницы, которая создаётся присвоением элементу атрибута id с любым символьным значением.',
    'новое слово': 'тут его определение',



}

# обработчик команды '/start'
@bot.message_handler(commands=['start'])
def start_command_handler(message: types.Message):
    # отправляем ответ на команду '/start'
    bot.send_message(
        chat_id=message.chat.id, # id чата, в который необходимо направить сообщение
        text='Привет! Я помогу тебе расшифровать сложные аббревиатуры и термины 🤓\nВведи интересующий термин, например, регресс', # текст сообщения
    )

# обработчик всех остальных сообщений
@bot.message_handler()
def message_handler(message: types.Message):
    # пробуем найти ключевую фразу в словаре
    definition = DEFINITOINS.get(
        message.text.lower(), # приводим текст сообщения к нижнему регистру
    )
    # если фразы нет в словаре, то переменная definition будет иметь значение None
    # проверяем это условие
    if definition is None:
        # если ключевая фраза не была найдена в словаре
        # отправляем ответ
        bot.send_message(
            chat_id=message.chat.id,
            text='😋 Я пока не знаю такого определения',
        )
        # выходим из функции
        return
    
    # если ключевая фраза была найдена, формируем текст сообщения и отправляем его
    # если перед строкой поставить букву f, то в фигурных скобках {} можно использовать переменные :)
    bot.send_message(
        chat_id=message.chat.id,
        text=f'Определение:\n<code>{definition}</code>',
    )

    bot.send_message(
        chat_id=message.chat.id,
        text=f'Жду следующий термин',
    )


# главная функция программы
def main():
    # запускаем нашего бота
    bot.infinity_polling()


if __name__ == '__main__':
    main()
